{"version":3,"sources":["app.js","BaseController.js","BaseService.js","UsersService.js","BookmarksService.js","SecurityService.js","FoldersService.js","DashboardService.js","HomeController.js","DashboardController.js","SettingsController.js"],"names":[],"mappingspNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChvrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbzlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["(function () {\r\n\r\n    'use strict';\r\n    angular\r\n\r\n\r\n            .module('crypt', ['ui.router', 'ngSanitize', 'ngStorage', 'ui.bootstrap', 'satellizer', 'angular-loading-bar', 'ngFileUpload', 'angular-inview',\r\n                'ngAside', 'fsm', 'pusher-angular', 'ngIdle', 'picardy.fontawesome', 'ui-notification'])\r\n//            .constant(\"customConfig\", JSON.parse(customConfigInline))\r\n            .config(function ($locationProvider, $stateProvider, $urlRouterProvider, $authProvider, $httpProvider, $provide, IdleProvider, KeepaliveProvider, NotificationProvider) {\r\n                // configure Idle settings\r\n                IdleProvider.idle(30); // in seconds\r\n                IdleProvider.timeout(9000); // in seconds\r\n                KeepaliveProvider.interval(5000); // in seconds\r\n\r\n                NotificationProvider.setOptions({\r\n                    delay: 10000,\r\n                    startTop: 20,\r\n                    startRight: 10,\r\n                    verticalSpacing: 20,\r\n                    horizontalSpacing: 20,\r\n                    positionX: 'right',\r\n                    positionY: 'bottom'\r\n                });\r\n\r\n                function redirectWhenLoggedOut($q, $injector, $rootScope) {\r\n\r\n                    return {\r\n                        responseError: function (rejection) {\r\n\r\n                            // Need to use $injector.get to bring in $state or else we get\r\n                            // a circular dependency error\r\n                            var $state = $injector.get('$state');\r\n                            // Instead of checking for a status code of 400 which might be used\r\n                            // for other reasons in Laravel, we check for the specific rejection\r\n                            // reasons to tell us if we need to redirect to the login state\r\n                            var rejectionReasons = ['token_not_provided', 'token_expired', 'token_absent', 'token_invalid'];\r\n                            // Loop through each rejection reason and redirect to the login\r\n                            // state if one is encountered\r\n                            angular.forEach(rejectionReasons, function (value, key) {\r\n\r\n                                if (rejection.data.error === value) {\r\n\r\n                                    // If we get a rejection corresponding to one of the reasons\r\n                                    // in our array, we know we need to authenticate the user so\r\n                                    // we can remove the current user from local storage\r\n                                    // Remove the authenticated user from local storage\r\n                                    localStorage.removeItem('user');\r\n                                    // Flip authenticated to false so that we no longer\r\n                                    // show UI elements dependant on the user being logged in\r\n                                    $rootScope.authenticated = false;\r\n                                    // Remove the current user info from rootscope\r\n                                    $rootScope.currentUser = null;\r\n                                    $state.go('home');\r\n                                }\r\n                            });\r\n                            return $q.reject(rejection);\r\n                        }\r\n                    };\r\n                }\r\n                // Google\r\n                $authProvider.google({\r\n                    clientId: '1087260936038-u5v57plbt9ic8ei36jd9b645q8mqvsaj.apps.googleusercontent.com',\r\n                    url: 'api/users/authenticate/google',\r\n                    authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n                    redirectUri: window.location.origin + '/' + 'crypt/public/login',\r\n                    requiredUrlParams: ['scope'],\r\n                    optionalUrlParams: ['display'],\r\n                    scope: ['profile', 'email'],\r\n                    scopePrefix: 'openid',\r\n                    scopeDelimiter: ' ',\r\n                    display: 'popup',\r\n                    oauthType: '2.0',\r\n                    popupOptions: {width: 452, height: 633}\r\n                });\r\n                // Setup for the $httpInterceptor\r\n                $provide.factory('redirectWhenLoggedOut', redirectWhenLoggedOut);\r\n                // Push the new factory onto the $http interceptor array\r\n                $httpProvider.interceptors.push('redirectWhenLoggedOut');\r\n                // Satellizer configuration that specifies which API\r\n                // route the JWT should be retrieved from\r\n                $authProvider.baseUrl = null;\r\n                //$authProvider.httpInterceptor = true;\r\n                $authProvider.loginUrl = 'api/users/authenticate';\r\n                $authProvider.loginRedirect = null;\r\n                // Redirect to the auth state if any other states\r\n                // are requested other than users\r\n                $urlRouterProvider.otherwise('/');\r\n                $locationProvider.html5Mode(true);\r\n                $stateProvider\r\n\r\n                        .state('login', {\r\n                            url: '/login'\r\n                        })\r\n                        .state('home', {\r\n                            url: '/',\r\n                            templateUrl: 'js/angular/components/home/index.html',\r\n                            controller: 'HomeController as HomeCtrl'\r\n                        })\r\n                        .state('dashboard', {\r\n                            url: '/mycrypt',\r\n                            templateUrl: 'js/angular/components/dashboard/index.html',\r\n                            controller: 'DashboardController as DashCtrl'\r\n                        })\r\n                        .state('settings', {\r\n                            url: '/settings',\r\n                            templateUrl: 'js/angular/components/settings/index.html',\r\n                            controller: 'SettingsController as SettingsCtrl'\r\n                        })\r\n\r\n\r\n                        ;\r\n            })\r\n\r\n            .directive('ngReallyClick', ['$uibModal',\r\n                function ($uibModal) {\r\n                    var ModalInstanceCtrl = function ($scope, $uibModalInstance) {\r\n                        $scope.ok = function () {\r\n                            $uibModalInstance.close();\r\n                        };\r\n                        $scope.cancel = function () {\r\n                            $uibModalInstance.dismiss('cancel');\r\n                        };\r\n                    };\r\n                    return {\r\n                        restrict: 'A',\r\n                        scope: {\r\n                            ngReallyClick: \"&\",\r\n                            item: \"=\"\r\n                        },\r\n                        link: function (scope, element, attrs) {\r\n                            element.bind('click', function () {\r\n                                var message = attrs.ngReallyMessage || \"Are you sure ?\";\r\n                                var modalHtml = '<div class=\"modal-body\">' + message + '</div>';\r\n                                modalHtml += '<div class=\"modal-footer\"><button class=\"btn btn-primary\" ng-click=\"ok()\">OK</button><button class=\"btn btn-warning\" ng-click=\"cancel()\">Cancel</button></div>';\r\n                                var modalInstance = $uibModal.open({\r\n                                    template: modalHtml,\r\n                                    windowClass: 'delete-folder-box-modal',\r\n                                    controller: ModalInstanceCtrl\r\n                                });\r\n                                modalInstance.result.then(function () {\r\n                                    scope.ngReallyClick({item: scope.item}); //raise an error : $digest already in progress\r\n                                }, function () {\r\n                                    //Modal dismissed\r\n                                });\r\n                                //*/\r\n\r\n                            });\r\n                        }\r\n                    };\r\n                }\r\n            ])\r\n            .filter('trusted', ['$sce', function ($sce) {\r\n                    return function (url) {\r\n                        return $sce.trustAsResourceUrl(url);\r\n                    };\r\n                }])\r\n\r\n            .run(['$rootScope', '$state', '$window', '$location', '$timeout', 'Idle', 'SecurityService', 'UsersService',\r\n                function ($rootScope, $state, $window, $location, $timeout, Idle,\r\n                        SecurityService,\r\n//                 UsersService,\r\n                        ) {\r\n\r\n\r\n                    var user = JSON.parse(localStorage.getItem('user'));\r\n                    if (user) {\r\n                        Idle.watch();\r\n\r\n                        var token = localStorage.getItem('satellizer_token');\r\n                        window.client = new Pusher(JSON.parse(customConfig).PUSHER_APP_KEY, {\r\n                            authEndpoint: '/broadcasting/auth',\r\n                            cluster: 'eu',\r\n                            encrypted: true,\r\n                            auth:\r\n                                    {\r\n                                        headers:\r\n                                                {\r\n                                                    'Authorization': 'Bearer ' + token\r\n                                                }\r\n                                    }\r\n                        });\r\n\r\n\r\n\r\n\r\n                        // The user's authenticated state gets flipped to\r\n                        // true so we can now show parts of the UI that rely\r\n                        // on the user being logged in\r\n                        $rootScope.authenticated = true;\r\n                        // Putting the user's data on $rootScope allows\r\n                        // us to access it anywhere across the app. Here\r\n                        // we are grabbing what is in local storage\r\n                        $rootScope.currentUser = user;\r\n                        SecurityService.update();\r\n//                        if (user.security_clearance > 1) {\r\n//                            UsersService.postchangeSecurityClearance('', 0);\r\n//                        }\r\n                    } else {\r\n                        $rootScope.authenticated = false;\r\n                        $rootScope.currentUser = null;\r\n                    }\r\n\r\n\r\n                    // $stateChangeStart is fired whenever the state changes. We can use some parameters\r\n                    // such as toState to hook into details about the state as it is changing\r\n                    $rootScope.$on('$stateChangeStart', function (event, toState) {\r\n                        //scroll to top automatically\r\n\r\n                        document.body.scrollTop = document.documentElement.scrollTop = 0;\r\n                        // Grab the user from local storage and parse it to an object\r\n                        var user = JSON.parse(localStorage.getItem('user'));\r\n                        // var allowed_states_for_guest = ['login'];\r\n                        // If there is any user data in local storage then the user is quite\r\n                        // likely authenticated. If their token is expired, or if they are\r\n                        // otherwise not actually authenticated, they will be redirected to\r\n                        // the auth state because of the rejected request anyway\r\n\r\n\r\n                        if (user) {\r\n\r\n                            // The user's authenticated state gets flipped to\r\n                            // true so we can now show parts of the UI that rely\r\n                            // on the user being logged in\r\n                            $rootScope.authenticated = true;\r\n                            // Putting the user's data on $rootScope allows\r\n                            // us to access it anywhere across the app. Here\r\n                            // we are grabbing what is in local storage\r\n                            $rootScope.currentUser = user;\r\n                            if (toState.name == 'home') {\r\n                                // add state.go in a timeout function because it does not work properly in the run function\r\n                                $timeout(function () {\r\n                                    $state.go('dashboard');\r\n                                });\r\n                            }\r\n\r\n                            if ($rootScope.currentUser.password == null && toState.name != 'settings') {\r\n                                $timeout(function () {\r\n                                    $state.go('settings');\r\n                                });\r\n                            }\r\n\r\n                        } else {\r\n                            if (toState.name == 'dashboard') {\r\n                                // add state.go in a timeout function because it does not work properly in the run function\r\n                                $timeout(function () {\r\n                                    $state.go('home');\r\n                                });\r\n                            }\r\n\r\n                            $rootScope.authenticated = false;\r\n                            $rootScope.currentUser = null;\r\n                        }\r\n                    });\r\n                }]);\r\n})();","(function () {\r\n\r\n    'use strict';\r\n\r\n    angular.module('crypt').controller('BaseController', ['$scope', '$auth', '$state', '$stateParams', '$rootScope', 'BaseService',\r\n        '$window', 'UsersService', 'BookmarksService', 'FoldersService', 'SecurityService', '$uibModal', 'DashboardService'\r\n                , BaseController]);\r\n\r\n    function BaseController($scope, $auth, $state, $stateParams, $rootScope, BaseService, $window, UsersService, BookmarksService, FoldersService, SecurityService, $uibModal, DashboardService) {\r\n\r\n        var vm = this;\r\n        vm.currentSecurityClearance = angular.copy(SecurityService.currentSecurityClearance);\r\n        vm.currentSecurityClearanceName = angular.copy(SecurityService.currentSecurityClearanceName);\r\n        vm.currentFolder = undefined;\r\n        vm.bookmark = {};\r\n\r\n        $rootScope.$on('IdleStart', function () {\r\n            // the user appears to have gone idle\r\n//            console.log('start');\r\n\r\n        });\r\n\r\n        $rootScope.$on('IdleWarn', function (e, countdown) {\r\n            // follows after the IdleStart event, but includes a countdown until the user is considered timed out\r\n            // the countdown arg is the number of seconds remaining until then.\r\n            // you can change the title or display a warning dialog from here.\r\n            // you can let them resume their session by calling Idle.watch()\r\n//            console.log('warn');\r\n        });\r\n\r\n        $rootScope.$on('IdleTimeout', function () {\r\n            // the user has timed out (meaning idleDuration + timeout has passed without any activity)\r\n            // this is where you'd log them\r\n            if (SecurityService.currentSecurityClearance > 1) {\r\n                UsersService.postchangeSecurityClearance('', 0);\r\n            }\r\n        });\r\n\r\n        $rootScope.$on('IdleEnd', function () {\r\n            // the user has come back from AFK and is doing stuff. if you are warning them, you can use this to hide the dialog\r\n//            console.log('back');\r\n        });\r\n\r\n        $rootScope.$on('Keepalive', function () {\r\n            // do something to keep the user's session alive\r\n//            console.log('help');\r\n        });\r\n\r\n\r\n\r\n        vm.store = function (bookmark) {\r\n            if (vm.currentFolder != undefined) {\r\n                bookmark.folder_id = vm.currentFolder.id;\r\n            }\r\n            BookmarksService.store(bookmark).then(function () {\r\n                vm.bookmark = {};\r\n            });\r\n        };\r\n\r\n        $scope.$watch(function () {\r\n            return FoldersService.currentFolder;\r\n        },\r\n                function (newValue, oldValue) {\r\n                    syncCurrentFolder();\r\n                }, true);\r\n        function syncCurrentFolder() {\r\n            vm.currentFolder = angular.copy(FoldersService.currentFolder);\r\n        }\r\n\r\n        vm.openImportHtml = function () {\r\n            var modalInstance = $uibModal.open({\r\n                animation: true,\r\n                templateUrl: 'js/angular/shared/import/_html.html',\r\n                async: true,\r\n                controller: function ($scope, $uibModalInstance, BookmarksService) {\r\n\r\n                    $scope.file = {};\r\n\r\n                    $scope.import = function (file, autoRefresh) {\r\n                        BookmarksService.importHtml(file, autoRefresh).then(function () {\r\n                            $uibModalInstance.dismiss();\r\n                        });\r\n                    };\r\n                    $scope.closeBox = function () {\r\n                        $uibModalInstance.dismiss();\r\n                    };\r\n                },\r\n                backdrop: true,\r\n                windowClass: 'import-html-box-modal'\r\n            });\r\n        };\r\n\r\n        $rootScope.$state = $state;\r\n\r\n        vm.windowHeight = ($window.innerHeight) + 'px';\r\n\r\n        vm.foldersCollapsed = angular.copy(DashboardService.foldersCollapsed);\r\n\r\n        $scope.$watch(function () {\r\n            return DashboardService.foldersCollapsed;\r\n        },\r\n                function (newValue, oldValue) {\r\n                    vm.foldersCollapsed = angular.copy(DashboardService.foldersCollapsed);\r\n                }, true);\r\n\r\n        $scope.$watch(function () {\r\n            return SecurityService.currentSecurityClearance;\r\n        },\r\n                function (newValue, oldValue) {\r\n                    vm.currentSecurityClearance = angular.copy(SecurityService.currentSecurityClearance);\r\n                    vm.currentSecurityClearanceName = angular.copy(SecurityService.currentSecurityClearanceName);\r\n\r\n                }, true);\r\n\r\n        vm.toggleCollapseFolders = function () {\r\n            DashboardService.foldersCollapsed = !DashboardService.foldersCollapsed;\r\n\r\n\r\n        };\r\n\r\n        vm.changeSecurityClearance = function (level) {\r\n            if ($rootScope.currentUser.password == null) {\r\n                $state.go('settings');\r\n            } else {\r\n                if (level > $rootScope.currentUser.security_clearance) {\r\n\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'js/angular/shared/authorization/_password.html',\r\n                        async: true,\r\n                        resolve: {\r\n                            level: function () {\r\n                                return level;\r\n                            }\r\n                        },\r\n                        controller: function ($scope, $uibModalInstance, UsersService, level, SecurityService) {\r\n\r\n                            $scope.password = '';\r\n                            $scope.level = level;\r\n\r\n                            $scope.changeSecurityClearance = function (password, level) {\r\n                                if (password != '') {\r\n                                    UsersService.postchangeSecurityClearance(password, level).then(function () {\r\n                                        $uibModalInstance.dismiss();\r\n                                    });\r\n                                }\r\n                            };\r\n                            $scope.closeBox = function () {\r\n                                $uibModalInstance.dismiss();\r\n                            };\r\n                        },\r\n                        backdrop: true,\r\n                        windowClass: 'authorization-box-modal'\r\n                    });\r\n                } else {\r\n                    UsersService.postchangeSecurityClearance('', level);\r\n                }\r\n            }\r\n\r\n\r\n        };\r\n\r\n        vm.isActive = function (viewLocation) {\r\n            return viewLocation === $state.current.name;\r\n        };\r\n\r\n        vm.authenticate = function (provider) {\r\n            UsersService.authenticate(provider).then(function () {\r\n                var token = localStorage.getItem('satellizer_token');\r\n\r\n                window.client = new Pusher(JSON.parse(customConfig).PUSHER_APP_KEY, {\r\n                    authEndpoint: '/broadcasting/auth',\r\n                    cluster: 'eu',\r\n                    encrypted: true,\r\n                    auth:\r\n                            {\r\n                                headers:\r\n                                        {\r\n                                            'Authorization': 'Bearer ' + token\r\n                                        }\r\n                            }\r\n                });\r\n            });\r\n        };\r\n\r\n        vm.logout = function () {\r\n            $auth.logout().then(function () {\r\n\r\n                UsersService.logout();\r\n                BookmarksService.logout();\r\n                FoldersService.logout();\r\n                SecurityService.logout();\r\n\r\n                // Remove the authenticated user from local storage\r\n//                localStorage.removeItem('user');\r\n                localStorage.clear();\r\n\r\n                // Flip authenticated to false so that we no longer\r\n                // show UI elements dependant on the user being logged in\r\n                $rootScope.authenticated = false;\r\n\r\n                // Remove the current user info from rootscope\r\n                $rootScope.currentUser = null;\r\n\r\n                $state.go('home');\r\n            });\r\n        };\r\n\r\n\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular.module('crypt').factory('BaseService', ['$rootScope', '$state',\r\n        function ($rootScope, Flash, $state) {\r\n\r\n            var service = {};\r\n\r\n            $rootScope.$state = $state;\r\n\r\n            service.load = function () {\r\n                $rootScope.loading = true;\r\n            };\r\n\r\n            service.unload = function () {\r\n                $rootScope.loading = false;\r\n            };\r\n\r\n            service.isEmpty = function (obj) {\r\n                for (var prop in obj) {\r\n                    if (obj.hasOwnProperty(prop))\r\n                        return false;\r\n                }\r\n\r\n                return true && JSON.stringify(obj) === JSON.stringify({});\r\n            }\r\n\r\n\r\n\r\n            return service;\r\n\r\n        }]);\r\n\r\n})();","(function () {\r\n\r\n    angular.module('crypt').factory('UsersService', ['BaseService', 'FoldersService', 'BookmarksService', 'SecurityService', '$http', '$rootScope', '$auth', '$window', '$state', function (BaseService, FoldersService, BookmarksService, SecurityService, $http, $rootScope, $auth, $window, $state) {\r\n\r\n            var service = {};\r\n            var url = 'api/users';\r\n            service.user = {};\r\n            service.error = {};\r\n            service.searchResults = [];\r\n\r\n            service.logout = function () {\r\n                service.user = {};\r\n                service.error = {};\r\n            }\r\n\r\n            service.postchangeSecurityClearance = function (password, level) {\r\n\r\n                BaseService.load();\r\n                return $http.post(url + '/security/clearance/change', {password: password, level: level})\r\n                        .success(function (data) {\r\n                            SecurityService.changeSecurityClearance(level);\r\n\r\n                            FoldersService.index().then(function () {\r\n                                BookmarksService.bookmarks = [];\r\n                                if (typeof FoldersService.currentFolder === 'undefined') {\r\n                                    BookmarksService.index();\r\n                                } else if (FoldersService.currentFolder === 'Shared With Me') {\r\n                                    BookmarksService.indexSharedWithMe(1);\r\n                                } else if (FoldersService.currentFolder === 'Shared By Me') {\r\n                                    BookmarksService.indexSharedByMe(1);\r\n                                } else {\r\n                                    BookmarksService.index(1, FoldersService.currentFolder.id);\r\n                                }\r\n                            });\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.search = function (q) {\r\n                BaseService.load();\r\n                return $http.post(url + '/search', {q: q})\r\n                        .success(function (data) {\r\n                            service.searchResults = data.users;\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.authenticate = function (provider) {\r\n                return $auth.authenticate(provider).then(function (data) {\r\n                    var user = JSON.stringify(data.data.user);\r\n\r\n                    // Set the stringified user data into local storage\r\n                    localStorage.setItem('user', user);\r\n\r\n                    // The user's authenticated state gets flipped to\r\n                    // true so we can now show parts of the UI that rely\r\n                    // on the user being logged in\r\n                    $rootScope.authenticated = true;\r\n\r\n\r\n                    // Putting the user's data on $rootScope allows\r\n                    // us to access it anywhere across the app\r\n                    $rootScope.currentUser = data.data.user;\r\n                    SecurityService.update();\r\n\r\n                    $state.go('dashboard')\r\n\r\n                });\r\n            };\r\n\r\n            service.changePassword = function (password) {\r\n                BaseService.load();\r\n                return $http.patch(url + '/update/password', password)\r\n                        .success(function (data) {\r\n                            var user = JSON.stringify(data.user);\r\n                            localStorage.setItem('user', user);\r\n                            $rootScope.currentUser = data.user;\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n\r\n            function findInArray(arraytosearch, valuetosearch) {\r\n                for (var i = 0; i < arraytosearch.length; i++) {\r\n                    if (arraytosearch[i].id == valuetosearch) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n\r\n            return service;\r\n        }]);\r\n})();","(function () {\r\n\r\n    angular.module('crypt').factory('BookmarksService', ['Upload', 'SecurityService', 'FoldersService', 'BaseService', '$http', '$rootScope', '$auth', '$window', '$state', 'Notification',\r\n        function (Upload, SecurityService, FoldersService, BaseService, $http, $rootScope, $auth, $window, $state, Notification) {\r\n\r\n            var service = {};\r\n            var url = 'api/bookmarks';\r\n            service.bookmarks = [];\r\n            service.pagination = {};\r\n            service.error = {};\r\n            service.searchResults = [];\r\n            service.searchInProgress = false;\r\n\r\n            service.logout = function () {\r\n                service.bookmarks = [];\r\n                service.pagination = {};\r\n                service.error = {};\r\n                service.searchResults = [];\r\n                service.searchInProgress = false;\r\n            }\r\n\r\n\r\n\r\n            service.index = function (page = 1, folder_id, order_by, order_by_attribute) {\r\n                BaseService.load();\r\n                var full_url = url + '?page=' + page;\r\n\r\n                if (folder_id != undefined) {\r\n                    full_url += '&folder_id=' + folder_id;\r\n                }\r\n\r\n                if (order_by != undefined) {\r\n                    full_url += '&order_by=' + order_by;\r\n                }\r\n\r\n                if (order_by_attribute != undefined) {\r\n                    full_url += '&order_by_attribute=' + order_by_attribute;\r\n                }\r\n\r\n                return $http.get(full_url)\r\n                        .success(function (data) {\r\n                            service.bookmarks = service.bookmarks.concat(data.bookmarks.data);\r\n                            service.pagination = data.bookmarks;\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.indexSharedWithMe = function (page = 1) {\r\n                BaseService.load();\r\n                var full_url = url + '/shared/mine' + '?page=' + page;\r\n                return $http.get(full_url)\r\n                        .success(function (data) {\r\n                            service.bookmarks = service.bookmarks.concat(data.bookmarks.data);\r\n                            service.pagination = data.bookmarks;\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.indexSharedByMe = function (page = 1) {\r\n                BaseService.load();\r\n                var full_url = url + '/shared/others' + '?page=' + page;\r\n                return $http.get(full_url)\r\n                        .success(function (data) {\r\n                            service.bookmarks = service.bookmarks.concat(data.bookmarks.data);\r\n                            service.pagination = data.bookmarks;\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n//            service.indexFolder = function (id) {\r\n//                BaseService.load();\r\n//                return $http.get(url + '/folder/' + id)\r\n//                        .success(function (data) {\r\n//                            service.bookmarks = service.bookmarks.concat(data.bookmarks.data);\r\n//                            service.pagination = data.bookmarks;\r\n//                        })\r\n//                        .error(function (error) {\r\n//                            service.error = error;\r\n//                        })\r\n//                        .finally(function () {\r\n//                            BaseService.unload();\r\n//                        });\r\n//            };\r\n\r\n            service.store = function (bookmark) {\r\n                BaseService.load();\r\n                return $http.post(url, bookmark)\r\n                        .success(function (data) {\r\n//                            if (FoldersService.currentFolder != 'Shared By Me' && FoldersService.currentFolder != 'Shared With Me') {\r\n//                                service.bookmarks.splice(0, 0, data.bookmark);\r\n//                            }\r\n                            Notification.primary('<span class=\"fa fa-check-circle-o\"></span>');\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.storeFromShare = function (bookmark) {\r\n                BaseService.load();\r\n                return $http.post(url, bookmark)\r\n                        .success(function (data) {\r\n                            Notification.primary('<span class=\"fa fa-check-circle-o\"></span>');\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.share = function (bookmark, user) {\r\n                BaseService.load();\r\n                return $http.post(url + '/share', {bookmark_id: bookmark.id, user_id: user.id})\r\n                        .success(function (data) {\r\n                            Notification.primary('<span class=\"fa fa-check-circle-o\"></span>');\r\n\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n            service.unshare = function (id) {\r\n                BaseService.load();\r\n                return $http.post(url + '/unshare', {id: id})\r\n                        .success(function (data) {\r\n                            service.bookmarks.splice(findInArrayByPivot(service.bookmarks, id), 1);\r\n                            Notification.primary('<span class=\"fa fa-check-circle-o\"></span>');\r\n\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.search = function (q) {\r\n                BaseService.load();\r\n                service.searchInProgress = true;\r\n                return $http.post(url + '/search', {q: q})\r\n                        .success(function (data) {\r\n                            service.searchResults = data.bookmarks;\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            service.searchInProgress = false;\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.update = function (bookmark) {\r\n                BaseService.load();\r\n                return $http.patch(url + '/' + bookmark.id, bookmark)\r\n                        .success(function (data) {\r\n                            var id = bookmark.id;\r\n                            id = findInArray(service.bookmarks, id);\r\n                            if (id == null) {\r\n                                return false;\r\n                            }\r\n                            service.bookmarks[id] = data.bookmark;\r\n                            Notification.primary('<span class=\"fa fa-check-circle-o\"></span>');\r\n\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n//            service.delete = function (bookmark) {\r\n//                BaseService.load();\r\n//                return $http.delete(url + '/' + bookmark.id)\r\n//                        .success(function (data) {\r\n//                            service.bookmarks.splice(findInArray(service.bookmarks, bookmark.id), 1);\r\n//                        })\r\n//                        .error(function (error) {\r\n//                            service.error = error;\r\n//                        })\r\n//                        .finally(function () {\r\n//                            BaseService.unload();\r\n//                        });\r\n//            };\r\n\r\n            service.deleteAll = function (bookmarks) {\r\n                BaseService.load();\r\n                return $http.post(url + '/all/delete', {bookmarks: bookmarks})\r\n                        .success(function (data) {\r\n                            for (var i = 0; i < bookmarks.length; i++) {\r\n                                service.bookmarks.splice(findInArray(service.bookmarks, bookmarks[i].id), 1);\r\n                            }\r\n                            Notification.primary('<span class=\"fa fa-check-circle-o\"></span>');\r\n\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.changeFolderAll = function (id, bookmarks) {\r\n                BaseService.load();\r\n                return $http.post(url + '/all/move', {id: id, bookmarks: bookmarks})\r\n                        .success(function (data) {\r\n                            if (typeof FoldersService.currentFolder !== 'undefined') {\r\n                                for (var i = 0; i < bookmarks.length; i++) {\r\n                                    service.bookmarks.splice(findInArray(service.bookmarks, bookmarks[i].id), 1);\r\n                                }\r\n                            } else {\r\n                                for (var i = 0; i < bookmarks.length; i++) {\r\n                                    service.bookmarks[findInArray(service.bookmarks, bookmarks[i].id)] = data.bookmarks[i];\r\n                                }\r\n\r\n                            }\r\n                            Notification.primary('<span class=\"fa fa-check-circle-o\"></span>');\r\n\r\n\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n\r\n            service.refresh = function (bookmarks) {\r\n                BaseService.load();\r\n                return $http.post(url + '/all/refresh', {bookmarks: bookmarks})\r\n                        .success(function (data) {\r\n//                            for (var i = 0; i < data.bookmarks.length; i++) {\r\n//                                service.bookmarks[findInArray(service.bookmarks, data.bookmarks[i].id)] = data.bookmarks[i];\r\n//                            }\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.changeSecurityClearanceAll = function (level, bookmarks) {\r\n                BaseService.load();\r\n                return $http.post(url + '/all/security/clearance/change', {level: level, bookmarks: bookmarks})\r\n                        .success(function (data) {\r\n                            if ($rootScope.currentUser.security_clearance < level) {\r\n                                for (var i = 0; i < bookmarks.length; i++) {\r\n                                    service.bookmarks.splice(findInArray(service.bookmarks, bookmarks[i].id), 1);\r\n                                }\r\n                            } else {\r\n                                for (var i = 0; i < bookmarks.length; i++) {\r\n                                    service.bookmarks[findInArray(service.bookmarks, bookmarks[i].id)] = data.bookmarks[i];\r\n                                }\r\n\r\n                            }\r\n                            Notification.primary('<span class=\"fa fa-check-circle-o\"></span>');\r\n\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.importHtml = function (file, autoRefresh) {\r\n                return  Upload.upload({\r\n                    url: url + '/import/html',\r\n                    data: {\r\n                        file: file,\r\n                        autoRefresh: autoRefresh\r\n                    }})\r\n                        .success(function (data) {\r\n\r\n                            for (var i = 0; i < data.folders.length; i++) {\r\n                                var folder = data.folders[i];\r\n                                if (findInArray(FoldersService.folders, folder.id) === null) {\r\n                                    FoldersService.folders.splice(0, 0, folder);\r\n                                }\r\n                            }\r\n\r\n                            FoldersService.currentFolder = data.folders[data.folders.length - 1];\r\n                            service.bookmarks = [];\r\n                            service.index(1, FoldersService.currentFolder.id);\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.handleOpened = function (bookmark) {\r\n                BaseService.load();\r\n                return $http.patch(url + '/' + bookmark.id + '/opened', {})\r\n                        .success(function (data) {\r\n\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.get = function (id) {\r\n                var id = id;\r\n                id = findInArray(service.bookmarks, id);\r\n                if (id == null) {\r\n                    return false;\r\n                }\r\n                return service.bookmarks[id];\r\n            };\r\n\r\n            function findInArray(arraytosearch, valuetosearch) {\r\n                for (var i = 0; i < arraytosearch.length; i++) {\r\n                    if (arraytosearch[i].id == valuetosearch) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n            function findInArrayByPivot(arraytosearch, valuetosearch) {\r\n                for (var i = 0; i < arraytosearch.length; i++) {\r\n                    if (arraytosearch[i].pivot.id == valuetosearch) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n\r\n            return service;\r\n        }]);\r\n})();","(function () {\r\n\r\n    angular.module('crypt').factory('SecurityService', ['BaseService', '$http', '$rootScope', '$auth', '$window', '$state', function (BaseService, $http, $rootScope, $auth, $window, $state) {\r\n            var service = {};\r\n            service.securityClearances = ['public', 'private', 'crypto'];\r\n\r\n            service.logout = function () {\r\n                service.currentSecurityClearance = undefined;\r\n                service.currentSecurityClearanceName = undefined;\r\n            };\r\n\r\n            service.changeSecurityClearance = function (level) {\r\n                service.currentSecurityClearance = level;\r\n                service.currentSecurityClearanceName = service.securityClearances[service.currentSecurityClearance];\r\n                $rootScope.currentUser.security_clearance = level;\r\n                var user = JSON.stringify($rootScope.currentUser);\r\n                localStorage.setItem('user', user);\r\n            };\r\n\r\n            service.update = function () {\r\n                service.currentSecurityClearance = $rootScope.currentUser.security_clearance;\r\n                service.currentSecurityClearanceName = service.securityClearances[service.currentSecurityClearance];\r\n//                console.log(service.currentSecurityClearance);\r\n//                console.log(service.currentSecurityClearanceName);\r\n            };\r\n\r\n\r\n\r\n            function findInArray(arraytosearch, valuetosearch) {\r\n                for (var i = 0; i < arraytosearch.length; i++) {\r\n                    if (arraytosearch[i].id == valuetosearch) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n\r\n            return service;\r\n        }]);\r\n})();","(function () {\r\n\r\n    angular.module('crypt').factory('FoldersService', ['SecurityService', 'BaseService', '$http', '$rootScope', '$auth', '$window', '$state', 'Notification',\r\n        function (SecurityService, BaseService, $http, $rootScope, $auth, $window, $state, Notification) {\r\n\r\n            var service = {};\r\n            var url = 'api/folders';\r\n            service.folders = [];\r\n            service.currentFolder = undefined;\r\n            service.error = {};\r\n\r\n            service.logout = function () {\r\n                service.folders = [];\r\n                service.currentFolder = undefined;\r\n            }\r\n\r\n\r\n            service.index = function () {\r\n                BaseService.load();\r\n                return $http.get(url)\r\n                        .success(function (data) {\r\n                            service.folders = data.folders;\r\n                            if (typeof service.currentFolder !== 'undefined') {\r\n                                if (findInArray(service.folders, service.currentFolder.id) == null) {\r\n                                    if (service.currentFolder === 'Shared With Me') {\r\n                                        service.currentFolder = 'Shared With Me';\r\n                                    } else if (service.currentFolder === 'Shared By Me') {\r\n                                        service.currentFolder = 'Shared By Me';\r\n                                    } else {\r\n                                        service.currentFolder = undefined;\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.store = function (folder) {\r\n                BaseService.load();\r\n                return $http.post(url, folder)\r\n                        .success(function (data) {\r\n                            service.folders.splice(0, 0, data.folder);\r\n                            Notification.primary('<span class=\"fa fa-check-circle-o\"></span>');\r\n\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.update = function (folder) {\r\n                BaseService.load();\r\n                return $http.patch(url + '/' + folder.id, folder)\r\n                        .success(function (data) {\r\n                            if (data.folder.security_clearance > $rootScope.currentUser.security_clearance) {\r\n                                service.folders.splice(findInArray(service.folders, folder.id), 1);\r\n                            } else {\r\n                                service.folders[findInArray(service.folders, folder.id)] = data.folder;\r\n                            }\r\n                            Notification.primary('<span class=\"fa fa-check-circle-o\"></span>');\r\n\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            service.delete = function (folder) {\r\n                BaseService.load();\r\n                return $http.delete(url + '/' + folder.id)\r\n                        .success(function (data) {\r\n                            service.folders.splice(findInArray(service.folders, folder.id), 1);\r\n                            Notification.primary('<span class=\"fa fa-check-circle-o\"></span>');\r\n\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n\r\n            service.changeSecurityClearanceAll = function (level, bookmarks) {\r\n                BaseService.load();\r\n                return $http.post(url + '/all/security/clearance/change', {level: level, bookmarks: bookmarks})\r\n                        .success(function (data) {\r\n                            if ($rootScope.currentUser.security_clearance < level) {\r\n                                for (var i = 0; i < bookmarks.length; i++) {\r\n                                    service.bookmarks.splice(findInArray(service.bookmarks, bookmarks[i].id), 1);\r\n                                }\r\n                            }\r\n                            Notification.primary('<span class=\"fa fa-check-circle-o\"></span>');\r\n\r\n                        })\r\n                        .error(function (error) {\r\n                            service.error = error;\r\n                        })\r\n                        .finally(function () {\r\n                            BaseService.unload();\r\n                        });\r\n            };\r\n\r\n            function findInArray(arraytosearch, valuetosearch) {\r\n                for (var i = 0; i < arraytosearch.length; i++) {\r\n                    if (arraytosearch[i].id == valuetosearch) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n\r\n            return service;\r\n        }]);\r\n})();","(function () {\r\n\r\n    angular.module('crypt').factory('DashboardService', ['$rootScope', '$state',\r\n        function ($rootScope, Flash, $state) {\r\n\r\n            var service = {};\r\n            service.foldersCollapsed = true;\r\n            service.playerVisible = true;\r\n            service.isPlaying = false;\r\n            var listBlocksLocalStorage = localStorage.getItem('listBlocks');\r\n            service.listBlocks = listBlocksLocalStorage == null ? false : listBlocksLocalStorage === 'true' ? true : false;\r\n\r\n\r\n\r\n\r\n\r\n\r\n            return service;\r\n\r\n        }]);\r\n\r\n})();","(function () {\r\n\r\n    'use strict';\r\n\r\n    angular.module('crypt').controller('HomeController', ['$auth', '$state', '$stateParams', '$rootScope', 'BaseService', '$scope', HomeController]);\r\n\r\n    function HomeController($auth, $state, $stateParams, $rootScope, BaseService, $scope) {\r\n\r\n        var vm = this;\r\n\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    'use strict';\r\n\r\n    angular.module('crypt').controller('DashboardController', ['$uibModalStack', '$auth', '$state', '$stateParams', '$pusher',\r\n        '$window', '$rootScope', 'BaseService', '$scope', '$aside', 'SecurityService',\r\n        'BookmarksService', 'FoldersService', 'DashboardService', '$uibModal', 'UsersService'\r\n                , DashboardController]);\r\n\r\n\r\n    function DashboardController($uibModalStack, $auth, $state, $stateParams, $pusher, $window, $rootScope, BaseService, $scope, $aside, SecurityService,\r\n            BookmarksService, FoldersService, DashboardService, $uibModal, UsersService) {\r\n\r\n        var vm = this;\r\n        vm.bookmarks = [];\r\n        vm.pagination = {};\r\n        vm.folders = [];\r\n        vm.currentFolder = undefined;\r\n        vm.selected = [];\r\n        vm.searchResults = [];\r\n        vm.listBlocks = angular.copy(DashboardService.listBlocks);\r\n        vm.isLoadingMore = false;\r\n        vm.foldersCollapsed = angular.copy(DashboardService.foldersCollapsed);\r\n        vm.editMode = false;\r\n        vm.orderBy = undefined;\r\n        vm.orderByAttribute = undefined;\r\n        vm.playerVisible = angular.copy(DashboardService.playerVisible);\r\n        vm.isPlaying = angular.copy(DashboardService.isPlaying);\r\n        vm.sharing = {\r\n            search: {\r\n                q: ''\r\n            }\r\n        };\r\n\r\n\r\n        $scope.$watch(function () {\r\n            return DashboardService.listBlocks;\r\n        },\r\n                function (newValue, oldValue) {\r\n                    vm.listBlocks = angular.copy(DashboardService.listBlocks);\r\n                }, true);\r\n\r\n        $scope.$watch(function () {\r\n            return DashboardService.playerVisible;\r\n        },\r\n                function (newValue, oldValue) {\r\n                    vm.playerVisible = angular.copy(DashboardService.playerVisible);\r\n                }, true);\r\n\r\n        $scope.$watch(function () {\r\n            return DashboardService.isPlaying;\r\n        },\r\n                function (newValue, oldValue) {\r\n                    vm.isPlaying = angular.copy(DashboardService.isPlaying);\r\n                }, true);\r\n        $scope.$watch(function () {\r\n            return BookmarksService.pagination;\r\n        },\r\n                function (newValue, oldValue) {\r\n                    vm.pagination = angular.copy(BookmarksService.pagination);\r\n                }, true);\r\n\r\n        $scope.$watch(function () {\r\n            return BookmarksService.searchResults;\r\n        },\r\n                function (newValue, oldValue) {\r\n                    vm.searchResults = angular.copy(BookmarksService.searchResults);\r\n                }, true);\r\n\r\n        $scope.$watch(function () {\r\n            return BookmarksService.bookmarks;\r\n        },\r\n                function (newValue, oldValue) {\r\n                    syncBookmarks();\r\n                }, true);\r\n\r\n        $scope.$watch(function () {\r\n            return FoldersService.folders;\r\n        },\r\n                function (newValue, oldValue) {\r\n                    syncFolders();\r\n                }, true);\r\n\r\n        $scope.$watch(function () {\r\n            return FoldersService.currentFolder;\r\n        },\r\n                function (newValue, oldValue) {\r\n                    syncCurrentFolder();\r\n                    vm.selected = [];\r\n\r\n                }, true);\r\n\r\n        function syncBookmarks() {\r\n            vm.bookmarks = angular.copy(BookmarksService.bookmarks);\r\n        }\r\n        function syncFolders() {\r\n            vm.folders = angular.copy(FoldersService.folders);\r\n        }\r\n        function syncCurrentFolder() {\r\n            vm.currentFolder = angular.copy(FoldersService.currentFolder);\r\n        }\r\n\r\n        vm.showPlayerBox = function () {\r\n            DashboardService.playerVisible = true;\r\n            var backdrop = angular.element(document.querySelector(\".modal-backdrop\"));\r\n            var body = angular.element(document.querySelector(\".modal-open\"));\r\n            var modal = angular.element(document.querySelector(\".player-box-modal\"));\r\n            backdrop.removeClass('player-box-modal-backdrop-minmize');\r\n            body.removeClass('player-box-modal-body-minmize');\r\n            modal.removeClass('player-box-modal-minimize');\r\n        };\r\n\r\n        vm.switchView = function () {\r\n            DashboardService.listBlocks = angular.copy(!DashboardService.listBlocks);\r\n            localStorage.setItem('listBlocks', DashboardService.listBlocks);\r\n        };\r\n\r\n        vm.getFolder = function (folder_id) {\r\n            if (folder_id != null) {\r\n                var index = findInArray(FoldersService.folders, folder_id);\r\n                if (index != null) {\r\n                    return FoldersService.folders[index];\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        vm.getSecurityClearance = function (security_clearance) {\r\n            return SecurityService.securityClearances[security_clearance];\r\n        };\r\n\r\n        vm.typeAheadOptions = {\r\n            debounce: {\r\n                default: 500,\r\n                blur: 250\r\n            },\r\n            getterSetter: true\r\n        };\r\n\r\n        vm.searchSelected = function ($item, $model, $label, $event) {\r\n            $window.open($item.url, '_blank');\r\n            vm.search.text = '';\r\n        };\r\n\r\n        vm.search = function (q) {\r\n            return BookmarksService.search(q).then(function (data) {\r\n                return data.data.bookmarks;\r\n            });\r\n        };\r\n\r\n        vm.searchSelectedShare = function ($item, $model, $label, $event, bookmark) {\r\n            return BookmarksService.share(bookmark, $item).then(function (data) {\r\n                vm.sharing.search.q = '';\r\n            });\r\n        };\r\n\r\n        vm.unshare = function (id) {\r\n            return BookmarksService.unshare(id);\r\n        };\r\n\r\n        vm.searchUser = function (q) {\r\n            return UsersService.search(q).then(function (data) {\r\n                return data.data.users;\r\n            });\r\n        };\r\n\r\n        var pusher = $pusher(window.client);\r\n\r\n        var bookmarksStored = pusher.subscribe('private-users.' + $rootScope.currentUser.id + '.bookmarks');\r\n\r\n        bookmarksStored.bind('bookmarks.stored',\r\n                function (data) {\r\n                    if (data.bookmark.security_clearance <= SecurityService.currentSecurityClearance) {\r\n                        var index = findInArray(BookmarksService.bookmarks, data.bookmark.id);\r\n                        if (index == null) {\r\n                            if (typeof FoldersService.currentFolder === 'undefined') {\r\n                                FoldersService.index().then(function () {\r\n                                    BookmarksService.bookmarks.splice(0, 0, data.bookmark);\r\n                                })\r\n                            } else {\r\n                                if (FoldersService.currentFolder != 'Shared With Me' && FoldersService.currentFolder != 'Shared By Me') {\r\n                                    if (data.bookmark.folder_id == FoldersService.currentFolder.id) {\r\n                                        BookmarksService.bookmarks.splice(0, 0, data.bookmark);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n\r\n        bookmarksStored.bind('bookmarks.refreshed',\r\n                function (data) {\r\n                    if (data.bookmark.security_clearance <= SecurityService.currentSecurityClearance) {\r\n                        var index = findInArray(BookmarksService.bookmarks, data.bookmark.id);\r\n                        if (index != null) {\r\n                            if (FoldersService.currentFolder != 'Shared With Me' && FoldersService.currentFolder != 'Shared By Me') {\r\n                                BookmarksService.bookmarks[index] = data.bookmark;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n\r\n        vm.storeFromShare = function (bookmark) {\r\n            BookmarksService.storeFromShare({url: bookmark.url});\r\n        };\r\n\r\n        $scope.$watch(function () {\r\n            return DashboardService.foldersCollapsed;\r\n        },\r\n                function (newValue, oldValue) {\r\n                    vm.foldersCollapsed = angular.copy(DashboardService.foldersCollapsed);\r\n                    if (!vm.foldersCollapsed) {\r\n                        var asideInstance = $aside.open({\r\n                            templateUrl: 'js/angular/shared/folders/_index.html',\r\n                            controllerAs: 'DashboardFoldersCtrl',\r\n                            windowClass: 'folders-aside',\r\n                            scope: $scope,\r\n                            controller: function (folders, currentFolder) {\r\n                                var vm = this;\r\n                                vm.folders = folders;\r\n                                vm.currentFolder = currentFolder;\r\n                                vm.folder = {};\r\n\r\n                                $scope.$watch(function () {\r\n                                    return FoldersService.folders;\r\n                                },\r\n                                        function (newValue, oldValue) {\r\n                                            syncFolders();\r\n                                        }, true);\r\n\r\n                                $scope.$watch(function () {\r\n                                    return FoldersService.currentFolder;\r\n                                },\r\n                                        function (newValue, oldValue) {\r\n                                            syncCurrentFolder();\r\n\r\n                                        }, true);\r\n\r\n                                function syncFolders() {\r\n                                    vm.folders = angular.copy(FoldersService.folders);\r\n                                }\r\n                                function syncCurrentFolder() {\r\n                                    vm.currentFolder = angular.copy(FoldersService.currentFolder);\r\n                                }\r\n\r\n                                vm.storeFolder = function (folder) {\r\n\r\n                                    var modalInstance = $uibModal.open({\r\n                                        animation: true,\r\n                                        templateUrl: 'js/angular/shared/folders/_newFolder.html',\r\n                                        async: true,\r\n                                        controller: function ($scope, $uibModalInstance, FoldersService) {\r\n\r\n                                            $scope.folder = {name: ''};\r\n\r\n                                            $scope.store = function (folder) {\r\n                                                if (folder.name != '') {\r\n                                                    FoldersService.store(folder).then(function () {\r\n                                                        $uibModalInstance.dismiss();\r\n                                                    });\r\n                                                }\r\n                                            };\r\n                                            $scope.closeBox = function () {\r\n                                                $uibModalInstance.dismiss();\r\n                                            };\r\n                                        },\r\n                                        backdrop: true,\r\n                                        windowClass: 'new-folder-box-modal'\r\n                                    });\r\n\r\n                                };\r\n\r\n                                vm.editFolder = function (folder) {\r\n\r\n                                    var modalInstance = $uibModal.open({\r\n                                        animation: true,\r\n                                        templateUrl: 'js/angular/shared/folders/_editFolder.html',\r\n                                        async: true,\r\n                                        resolve: {\r\n                                            folder: function () {\r\n                                                return angular.copy(folder);\r\n                                            }\r\n                                        },\r\n                                        controller: function ($scope, $uibModalInstance, FoldersService, folder) {\r\n\r\n                                            $scope.folder = folder\r\n\r\n                                            $scope.update = function (folder) {\r\n                                                if (folder.name != '') {\r\n                                                    FoldersService.update(folder).then(function () {\r\n                                                        $uibModalInstance.dismiss();\r\n                                                    });\r\n                                                }\r\n                                            };\r\n\r\n                                            $scope.closeBox = function () {\r\n                                                $uibModalInstance.dismiss();\r\n                                            };\r\n                                        },\r\n                                        backdrop: true,\r\n                                        windowClass: 'edit-folder-box-modal'\r\n                                    });\r\n\r\n                                };\r\n\r\n                                vm.deleteFolder = function (folder) {\r\n                                    FoldersService.delete(folder).then(function (data) {\r\n                                        if (typeof FoldersService.currentFolder === 'undefined') {\r\n                                            for (var i = 0; i < data.data.bookmarks.length; i++) {\r\n                                                BookmarksService.bookmarks.splice(findInArray(BookmarksService.bookmarks, data.data.bookmarks[i]), 1);\r\n                                            }\r\n                                        } else if (FoldersService.currentFolder.id === folder.id) {\r\n                                            FoldersService.currentFolder = undefined;\r\n                                            BookmarksService.bookmarks = [];\r\n                                            BookmarksService.index();\r\n                                        }\r\n                                    });\r\n                                };\r\n\r\n                            },\r\n                            placement: 'left',\r\n                            size: 'sm',\r\n                            resolve: {\r\n                                folders: function () {\r\n                                    return vm.folders;\r\n                                },\r\n                                currentFolder: function () {\r\n                                    return vm.currentFolder;\r\n                                }\r\n                            }\r\n                        });\r\n                        asideInstance.closed.then(function () {\r\n                            DashboardService.foldersCollapsed = true;\r\n                        });\r\n                    }\r\n                }, true);\r\n\r\n        vm.editBookmark = function (id) {\r\n            var bookmark = BookmarksService.get(id);\r\n            if (bookmark != false) {\r\n                var asideInstance = $aside.open({\r\n                    templateUrl: 'js/angular/shared/bookmarks/_edit.html',\r\n                    controllerAs: 'EditBookmarkCtrl',\r\n                    windowClass: 'edit-bookmark-aside',\r\n                    placement: 'right',\r\n                    size: 'sm',\r\n                    resolve: {\r\n                        bookmark: function () {\r\n                            return angular.copy(bookmark);\r\n                        }\r\n                    },\r\n                    controller: function ($uibModalInstance, bookmark) {\r\n                        var vm = this;\r\n                        vm.bookmark = bookmark;\r\n\r\n                        vm.update = function (bookmark) {\r\n                            BookmarksService.update(bookmark).then(function (data) {\r\n                                $uibModalInstance.dismiss();\r\n                            });\r\n                        };\r\n                        vm.closeBox = function () {\r\n                            $uibModalInstance.dismiss();\r\n                        };\r\n                    }\r\n\r\n                });\r\n            }\r\n        };\r\n\r\n        vm.openPlayer = function (bookmark) {\r\n\r\n            if (vm.isPlaying) {\r\n                $uibModalStack.dismissAll('playing different video');\r\n            }\r\n\r\n            var playerModalInstance = $uibModal.open({\r\n                animation: true,\r\n                templateUrl: 'js/angular/shared/player/_player.html',\r\n                async: true,\r\n                controllerAs: 'PlayerCtrl',\r\n//                backdrop: true,\r\n                backdrop: 'static',\r\n                windowClass: 'player-box-modal',\r\n                size: 'lg',\r\n                resolve: {\r\n                    bookmark: function () {\r\n                        return angular.copy(bookmark);\r\n                    }\r\n                },\r\n                controller: function ($uibModalInstance, bookmark, DashboardService) {\r\n                    var vm = this;\r\n                    vm.bookmark = bookmark;\r\n                    vm.visible = angular.copy(DashboardService.playerVisible);\r\n                    DashboardService.isPlaying = true;\r\n                    vm.isPlaying = angular.copy(DashboardService.isPlaying);\r\n\r\n                    $scope.$watch(function () {\r\n                        return DashboardService.playerVisible;\r\n                    },\r\n                            function (newValue, oldValue) {\r\n                                vm.visible = angular.copy(DashboardService.playerVisible);\r\n                            }, true);\r\n\r\n                    $scope.$watch(function () {\r\n                        return DashboardService.isPlaying;\r\n                    },\r\n                            function (newValue, oldValue) {\r\n                                vm.isPlaying = angular.copy(DashboardService.isPlaying);\r\n\r\n                            }, true);\r\n\r\n                    vm.closeBox = function () {\r\n                        $uibModalInstance.close();\r\n                    };\r\n\r\n                    vm.hideBox = function () {\r\n                        DashboardService.playerVisible = false;\r\n                        var backdrop = angular.element(document.querySelector(\".modal-backdrop\"));\r\n                        var body = angular.element(document.querySelector(\".modal-open\"));\r\n                        var modal = angular.element(document.querySelector(\".player-box-modal\"));\r\n                        backdrop.addClass('player-box-modal-backdrop-minmize');\r\n                        body.addClass('player-box-modal-body-minmize');\r\n                        modal.addClass('player-box-modal-minimize');\r\n\r\n                    };\r\n\r\n                }\r\n            }).result.then(function () {\r\n                //Get triggers when modal is closed\r\n            }, function (reason) {\r\n\r\n\r\n            }).finally(function () {\r\n                DashboardService.playerVisible = true;\r\n                DashboardService.isPlaying = false;\r\n                var backdrop = angular.element(document.querySelector(\".modal-backdrop\"));\r\n                var body = angular.element(document.querySelector(\".modal-open\"));\r\n                var modal = angular.element(document.querySelector(\".player-box-modal\"));\r\n                backdrop.removeClass('player-box-modal-backdrop-minmize');\r\n                body.removeClass('player-box-modal-body-minmize');\r\n                modal.removeClass('player-box-modal-minimize');\r\n            });\r\n        }\r\n\r\n\r\n\r\n        vm.toggleSelectAll = function () {\r\n            if (vm.selected.length == 0) {\r\n                vm.selected = angular.copy(vm.bookmarks);\r\n            } else {\r\n                vm.selected = [];\r\n            }\r\n        };\r\n\r\n        vm.index = function (page, folder, order_by, order_by_attribute) {\r\n            var folder_id = folder;\r\n            if (folder_id != undefined) {\r\n                folder_id = folder.id;\r\n            }\r\n\r\n            if (folder != vm.currentFolder) {\r\n                BookmarksService.bookmarks = [];\r\n            }\r\n\r\n            if (folder_id != undefined) {\r\n                FoldersService.currentFolder = {id: folder_id};\r\n            } else {\r\n                FoldersService.currentFolder = folder_id;\r\n            }\r\n\r\n            vm.isLoadingMore = true;\r\n            BookmarksService.index(page, folder_id, order_by, order_by_attribute).then(function () {\r\n                vm.isLoadingMore = false;\r\n                DashboardService.foldersCollapsed = true;\r\n            });\r\n            ;\r\n        };\r\n\r\n        vm.indexSharedWithMe = function (page) {\r\n//            if (vm.currentFolder != 'Shared With Me') {\r\n            BookmarksService.bookmarks = [];\r\n//            }\r\n            FoldersService.currentFolder = 'Shared With Me';\r\n            BookmarksService.indexSharedWithMe(page).then(function () {\r\n                DashboardService.foldersCollapsed = true;\r\n            });\r\n        };\r\n\r\n        vm.indexSharedByMe = function (page) {\r\n//            if (vm.currentFolder != 'Shared By Me') {\r\n            BookmarksService.bookmarks = [];\r\n//            }\r\n            FoldersService.currentFolder = 'Shared By Me';\r\n            BookmarksService.indexSharedByMe(page).then(function () {\r\n                DashboardService.foldersCollapsed = true;\r\n            });\r\n        };\r\n\r\n        vm.indexFolders = function () {\r\n            FoldersService.index();\r\n        };\r\n\r\n        vm.selectBookmark = function ($event, bookmark) {\r\n            if (vm.editMode) {\r\n                var index = findInArray(vm.selected, bookmark.id);\r\n                if (index == null) {\r\n                    vm.selected.push(bookmark);\r\n                } else {\r\n                    vm.selected.splice(index, 1);\r\n                }\r\n            }\r\n        };\r\n\r\n        vm.refresh = function (selected) {\r\n            BookmarksService.refresh(selected).then(function () {\r\n                vm.selected = [];\r\n            });\r\n        };\r\n\r\n        vm.changeFolder = function (id, selected) {\r\n            BookmarksService.changeFolderAll(id, selected).then(function () {\r\n                vm.selected = [];\r\n            });\r\n        };\r\n\r\n//        vm.indexFolder = function (id) {\r\n//            BookmarksService.indexFolder(id).then(function () {\r\n//                FoldersService.currentFolder = {id: id};\r\n//                DashboardService.foldersCollapsed = true;\r\n//            });\r\n//        };\r\n\r\n//        vm.delete = function (bookmark) {\r\n//            BookmarksService.delete(bookmark);\r\n//        };\r\n\r\n        function findInArray(arraytosearch, valuetosearch) {\r\n            for (var i = 0; i < arraytosearch.length; i++) {\r\n                if (arraytosearch[i].id == valuetosearch) {\r\n                    return i;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n\r\n\r\n        vm.deleteSelected = function (selected) {\r\n            BookmarksService.deleteAll(selected).then(function () {\r\n                vm.selected = [];\r\n            });\r\n\r\n        };\r\n\r\n        vm.changeSecurityClearanceSelected = function (level, selected) {\r\n            BookmarksService.changeSecurityClearanceAll(level, selected).then(function () {\r\n                vm.selected = [];\r\n            });\r\n        };\r\n\r\n        vm.isBookmarkSelected = function (id) {\r\n            if (findInArray(vm.selected, id) == null) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        vm.getCurrentFolder = function (id) {\r\n            var index = findInArray(vm.folders, id);\r\n            var folder = vm.folders[index];\r\n            return folder;\r\n        };\r\n\r\n        vm.bookmarkOpened = function (bookmark) {\r\n            BookmarksService.handleOpened(bookmark);\r\n        };\r\n\r\n        function findInArray(arraytosearch, valuetosearch) {\r\n            for (var i = 0; i < arraytosearch.length; i++) {\r\n                if (arraytosearch[i].id == valuetosearch) {\r\n                    return i;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        vm.isEmpty = function (obj) {\r\n            for (var prop in obj) {\r\n                if (obj.hasOwnProperty(prop))\r\n                    return false;\r\n            }\r\n            return true;\r\n        };\r\n\r\n//        vm.index();\r\n        vm.indexFolders();\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    'use strict';\r\n\r\n    angular.module('crypt').controller('SettingsController', ['$auth', '$state', '$stateParams', '$rootScope', 'BaseService', 'UsersService', '$scope', SettingsController]);\r\n\r\n    function SettingsController($auth, $state, $stateParams, $rootScope, BaseService, UsersService, $scope) {\r\n\r\n        var vm = this;\r\n        vm.password = {\r\n            old: '',\r\n            new : '',\r\n            confirm_new: '',\r\n            is_null: $rootScope.currentUser.password == null ? true : false\r\n\r\n        };\r\n\r\n\r\n        vm.changePassword = function (password) {\r\n            UsersService.changePassword(password).then(function () {\r\n                $state.go('dashboard');\r\n            });\r\n        };\r\n\r\n\r\n    }\r\n\r\n})();"]}